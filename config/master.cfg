# -*- python -*-
# ex: set syntax=python:

#######
####### ScummVM settings for buildbot
#######

import os, sys, copy

expanded_base_dir = os.path.expanduser(basedir)
sys.path.append(expanded_base_dir)

import scumm
import scummsecret

buildbot_dst = "/.0/frs"

# ScummVM Repository
scumm_changeurl = "https://github.com/scummvm/scummvm"
scumm_giturl = "%s.git" % scumm_changeurl

scumm_branch_master = "master"
scumm_branch_master_desc = "master"

scumm_branch_stable = "branch-2-2"
scumm_branch_stable_desc = "stable"

scumm_package_dst_master = os.path.join(buildbot_dst, "snapshots/master")
scumm_package_dst_stable = os.path.join(buildbot_dst, "snapshots/stable")

# ScummVM Tools Repository
scumm_tools_changeurl = "https://github.com/scummvm/scummvm-tools"
scumm_tools_giturl = "%s.git" % scumm_tools_changeurl

scumm_tools_branch_master = "master"
scumm_tools_branch_master_desc = "tools-master"

scumm_tools_package_dst_master = os.path.join(buildbot_dst, "snapshots/tools-master")

# ScummVM "Other" Repository - Used for testing Extensive Changes, Pull Requests etc.
scumm_other_changeurl = "https://github.com/digitall/scummvm"
scumm_other_giturl = "%s.git" % scumm_other_changeurl

scumm_other_branch = "gsoc2012-scalers-cont"
scumm_other_branch_desc = "gsoc2012-scalers-cont"

scumm_other_package_dst = os.path.join(buildbot_dst, "snapshots/other")

# Currently (2014-04-02), a buildset for all scummvm builds takes about 14 GB
# for temporary files. With the current disk space, this means only tools and
# _TWO_ scummvm buildsets can be active at any time.
#
# Also, it is required to purge the temporary files for the older buildset via
# SSH prior to switching over.
#
# TODO: Need to look at automatically purging temporary files for any buildset
# which is inactive for longer than 1 day i.e. stable/other to help avoid
# future disk space issues.

# toggle nightly builds
scumm_build_nightly_master = True
scumm_build_nightly_stable = True
scumm_tools_build_nightly_master = True
scumm_build_nightly_other = False

# toggle verbose builds
scumm_verbose_build_master = True
scumm_verbose_build_stable = True
scumm_tools_verbose_build_master = True
scumm_other_verbose_build = True

# Files to package for scummvm stable snapshots (common to all ports).
scumm_package_stable = [
	"AUTHORS",
	"COPYING",
	"COPYING.LGPL",
	"COPYING.BSD",
	"COPYRIGHT",
	"NEWS.md",
	"README.md",
	"gui/themes/translations.dat",
	"gui/themes/scummclassic.zip",
	"gui/themes/scummmodern.zip",
	"gui/themes/scummremastered.zip",
	"dists/engine-data/access.dat",
	"dists/engine-data/cryomni3d.dat",
	"dists/engine-data/drascula.dat",
	"dists/engine-data/fonts.dat",
	"dists/engine-data/hugo.dat",
	"dists/engine-data/kyra.dat",
	"dists/engine-data/lure.dat",
	"dists/engine-data/mort.dat",
	"dists/engine-data/neverhood.dat",
	"dists/engine-data/queen.tbl",
	"dists/engine-data/sky.cpt",
	"dists/engine-data/supernova.dat",
	"dists/engine-data/teenagent.dat",
	"dists/engine-data/titanic.dat",
	"dists/engine-data/tony.dat",
	"dists/engine-data/toon.dat",
	"dists/engine-data/ultima.dat",
	"dists/engine-data/wintermute.zip",
	"dists/engine-data/xeen.ccs",
	"dists/networking/wwwroot.zip",
	"dists/pred.dic"
]

# Files to package for scummvm master snapshots (common to all ports).
scumm_package_master = copy.deepcopy(scumm_package_stable)
scumm_package_master.extend( [
	"dists/engine-data/cryo.dat",
	"dists/engine-data/macgui.dat",
	"dists/engine-data/macventure.dat",
	"dists/engine-data/myst3.dat",
	"dists/engine-data/grim-patch.lab",
	"dists/engine-data/monkey4-patch.m4b"
] )

# Files to package for scummvm other snapshots (common to all ports).
scumm_package_other = copy.deepcopy(scumm_package_master)

# Files to package for scummvm-tools master snapshots (common to all ports).
scumm_tools_package_master = [
	"COPYING",
	"NEWS",
	"README",
	"convert_dxa.sh",
	"convert_dxa.bat"
]

DEFAULT_PATH = "/usr/bin:/bin"
#DEFAULT_PATH = os.environ["PATH"]

scumm_env = {
	"LC_ALL": "C",
	"CXX": "",
	"CXXFLAGS": "",
	"CPPFLAGS": "",
	"LDFLAGS": "",
	"CCACHE_COMPRESS": "1",
	"PATH": DEFAULT_PATH
}

# These engines can't be used on some platforms due to CPU/Video requirements
scumm_disable_heavy_engines_master = "--disable-engines=sword25,wintermute"
scumm_disable_heavy_engines_stable = "--disable-engines=sword25,wintermute"

# Our platform definitions.

scumm_platforms_master = {}
scumm_platforms_stable = {}

# These platforms are defined as "Desktop" and so will have tools built for them
scumm_desktop_platforms = []

# These platforms are defined as "Build Only" and thus will not be packaged for download.
scumm_buildonly_platforms = []

# These platforms are defined as "unable to run tests" and thus will not build or run tests
scumm_untestable_platforms = []

# Native build (for triggering tests - Can't run cross compiled binaries, so can only run test on native)
scumm_native_buildname = [ "debian-x86_64" ]

# debian x86 32bit.
scumm_root_debian_x86 = "/opt/toolchains/debian-i386-linux-gnu"
scumm_env_debian_x86 = copy.deepcopy(scumm_env)
scumm_env_debian_x86["PATH"] = "%s/usr/bin:%s" % (scumm_root_debian_x86, DEFAULT_PATH)
scumm_env_debian_x86["CXX"] = "ccache g++"
scumm_env_debian_x86["CPPFLAGS"] = "-isystem %s/usr/include" % scumm_root_debian_x86
scumm_env_debian_x86["CXXFLAGS"] = "-m32"
scumm_env_debian_x86["LDFLAGS"] = "-m32 -Wl,-rpath,%s/lib/i386-linux-gnu -Wl,-rpath,%s/usr/lib/i386-linux-gnu -L%s/usr/lib/i386-linux-gnu" % \
																	(scumm_root_debian_x86, scumm_root_debian_x86, scumm_root_debian_x86)
scumm_env_debian_x86["PKG_CONFIG_LIBDIR"] = "%s/usr/lib/i386-linux-gnu/pkgconfig" % scumm_root_debian_x86

p = {
	"configureargs": [
		"--host=i386-linux-gnu"
	],
	"configureargs-tools": [
		"--host=i386-linux-gnu"
	],
	"env": scumm_env_debian_x86,
	"disttarget": "dist-generic",
	"package": [ "dist-generic/*" ],
	"package-tools": [
		"construct_mohawk",
		# "create_sjisfnt", # No freetype2 library
		"decine",
		#"decompile", # Decompiler currently not built - BOOST library not present
		"degob",
		"dekyra",
		"descumm",
		"desword2",
		"extract_mohawk",
		"gob_loadcalc",
		#"scummvm-tools", # GUI tools currently not built - WxWidgets library not present
		"scummvm-tools-cli"
	],
	"archive_format": "tar.xz"
}

scumm_platforms_master["debian-x86"] = p
scumm_platforms_stable["debian-x86"] = p
scumm_desktop_platforms.append("debian-x86")

# debian x86 32bit - testing null backend build.
p_nullbackend = copy.deepcopy(p)

p_nullbackend["configureargs"].extend( [
	"--backend=null"
] )

scumm_platforms_master["debian-x86-nullbackend"] = p_nullbackend
scumm_platforms_stable["debian-x86-nullbackend"] = p_nullbackend
scumm_buildonly_platforms.append("debian-x86-nullbackend")

# debian x86 64bit.
scumm_root_debian_x86_64 = "/opt/toolchains/debian-x86_64-linux-gnu"
scumm_env_debian_x86_64 = copy.deepcopy(scumm_env)
scumm_env_debian_x86_64["PATH"] = "%s/usr/bin:%s" % (scumm_root_debian_x86_64, DEFAULT_PATH)
scumm_env_debian_x86_64["CXX"] = "ccache g++"
scumm_env_debian_x86_64["CPPFLAGS"] = "-isystem %s/usr/include" % scumm_root_debian_x86_64
scumm_env_debian_x86_64["CXXFLAGS"] = "-m64"
scumm_env_debian_x86_64["LDFLAGS"] = "-m64 -Wl,-rpath,%s/lib/x86_64-linux-gnu -Wl,-rpath,%s/usr/lib/x86_64-linux-gnu -L%s/usr/lib/x86_64-linux-gnu" % \
									(scumm_root_debian_x86_64, scumm_root_debian_x86_64, scumm_root_debian_x86_64)

p = {
	"configureargs": [
		"--host=x86_64-linux-gnu"
	],
	"configureargs-tools": [
		"--host=x86_64-linux-gnu"
	],
	"env": scumm_env_debian_x86_64,
	"disttarget": "dist-generic",
	"package": [ "dist-generic/*" ],
	"package-tools": [
		"construct_mohawk",
		#"create_sjisfnt", # Currently not built as Freetype library not present
		"decine",
		#"decompile", # Decompiler currently not built - BOOST library not present
		"degob",
		"dekyra",
		"descumm",
		"desword2",
		"extract_mohawk",
		"gob_loadcalc",
		#"scummvm-tools", # GUI tools currently not built - WxWidgets library not present
		"scummvm-tools-cli"
	],
	"archive_format": "tar.xz"
}

scumm_platforms_master["debian-x86_64"] = p
scumm_platforms_stable["debian-x86_64"] = p
scumm_desktop_platforms.append("debian-x86_64")

# debian x86 using LLVM Clang compiler.
scumm_root_debian_x86_clang = "/opt/toolchains/debian-i386-linux-gnu"
scumm_env_debian_x86_clang = copy.deepcopy(scumm_env)
scumm_env_debian_x86_clang["PATH"] = "%s/usr/bin:%s" % (scumm_root_debian_x86_clang, DEFAULT_PATH)
scumm_env_debian_x86_clang["CXX"] = "ccache clang++"
scumm_env_debian_x86_clang["CPPFLAGS"] = "-isystem %s/usr/include" % scumm_root_debian_x86_clang
scumm_env_debian_x86_clang["CXXFLAGS"] = "-m32 -Qunused-arguments"
scumm_env_debian_x86_clang["LDFLAGS"] = "-m32 -Wl,-rpath,%s/lib/i386-linux-gnu -Wl,-rpath,%s/usr/lib/i386-linux-gnu -L%s/usr/lib/i386-linux-gnu" % \
																	(scumm_root_debian_x86_clang, scumm_root_debian_x86_clang, scumm_root_debian_x86_clang)
scumm_env_debian_x86_clang["PKG_CONFIG_LIBDIR"] = "%s/usr/lib/i386-linux-gnu/pkgconfig" % scumm_root_debian_x86_clang

p = {
	"configureargs": [
		"--host=i386-linux-gnu"
	],
	"configureargs-tools": [
		"--host=i386-linux-gnu"
	],
	"env": scumm_env_debian_x86_clang,
	"package": [ "scummvm" ],
	"package-tools": [
		"construct_mohawk",
		"create_sjisfnt",
		"decine",
		#"decompile", # Decompiler currently not built - BOOST library not present
		"degob",
		"dekyra",
		"descumm",
		"desword2",
		"extract_mohawk",
		"gob_loadcalc",
		#"scummvm-tools", # GUI tools currently not built - WxWidgets library not present
		"scummvm-tools-cli"
	],
	"archive_format": "tar.xz"
}

scumm_platforms_master["debian-x86-clang"] = p
scumm_platforms_stable["debian-x86-clang"] = p
# Desktop omitted as covered by debian-x86 build
scumm_buildonly_platforms.append("debian-x86-clang")

# MinGW 32bit, using the Win32 targetting MinGW-w64 compiler from the Debian repositories.
scumm_root_mingw_w32 = "/opt/toolchains/i686-w64-mingw32"
scumm_env_mingw_w32 = copy.deepcopy(scumm_env)
scumm_env_mingw_w32["PATH"] = "%s/bin:%s" % (scumm_root_mingw_w32, DEFAULT_PATH)
scumm_env_mingw_w32["CXX"] = "ccache i686-w64-mingw32-g++"
scumm_env_mingw_w32["CXXFLAGS"] = "-isystem %s/include" % scumm_root_mingw_w32
scumm_env_mingw_w32["LDFLAGS"] = "-L%s/lib" % scumm_root_mingw_w32
scumm_env_mingw_w32["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_root_mingw_w32

p = {
	"configureargs": [
		"--host=i686-w64-mingw32"
	],
	"configureargs-tools": [
		"--host=i686-w64-mingw32"
	],
	"env": scumm_env_mingw_w32,
	"strip": "i686-w64-mingw32-strip scummvm.exe",
	"package": [
		"scummvm.exe",
		"%s/bin/SDL2.dll" % scumm_root_mingw_w32,
		"%s/bin/SDL2_net.dll" % scumm_root_mingw_w32
	],
	"package-tools": [
		"construct_mohawk.exe",
		"create_sjisfnt.exe",
		"decine.exe",
		#"decompile.exe", # Decompiler currently not built - BOOST library not present
		"degob.exe",
		"dekyra.exe",
		"descumm.exe",
		"desword2.exe",
		"extract_mohawk.exe",
		"gob_loadcalc.exe",
		#"scummvm-tools.exe", # GUI tools currently not built - WxWidgets library not present
		"scummvm-tools-cli.exe"
	],
	"archive_format": "zip"
}

scumm_platforms_master["mingw-w32"] = p
scumm_platforms_stable["mingw-w32"] = p
scumm_desktop_platforms.append("mingw-w32")

# MinGW 64bit, using the Win64 targetting MinGW-w64 compiler from the Debian repositories.
scumm_root_mingw_w64 = "/opt/toolchains/x86_64-w64-mingw32"
scumm_env_mingw_w64 = copy.deepcopy(scumm_env)
scumm_env_mingw_w64["PATH"] = "%s/bin:%s" % (scumm_root_mingw_w64, DEFAULT_PATH)
scumm_env_mingw_w64["CXX"] = "ccache x86_64-w64-mingw32-g++"
scumm_env_mingw_w64["CXXFLAGS"] = "-isystem %s/include" % scumm_root_mingw_w64
scumm_env_mingw_w64["LDFLAGS"] = "-L%s/lib" % scumm_root_mingw_w64
scumm_env_mingw_w64["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_root_mingw_w64

p = {
	"configureargs": [
		"--host=x86_64-w64-mingw32"
	],
	"configureargs-tools": [
		"--host=x86_64-w64-mingw32"
	],
	"env": scumm_env_mingw_w64,
	"strip": "x86_64-w64-mingw32-strip scummvm.exe",
	"package": [
		"scummvm.exe",
		"%s/bin/SDL2.dll" % scumm_root_mingw_w64,
		"%s/bin/SDL2_net.dll" % scumm_root_mingw_w64
	],
	"package-tools": [
		"construct_mohawk.exe",
		# "create_sjisfnt.exe", # No freetype2 library
		"decine.exe",
		#"decompile.exe", # Decompiler currently not built - BOOST library not present
		"degob.exe",
		"dekyra.exe",
		"descumm.exe",
		"desword2.exe",
		"extract_mohawk.exe",
		"gob_loadcalc.exe",
		#"scummvm-tools.exe", # GUI tools currently not built - WxWidgets library not present
		"scummvm-tools-cli.exe"
	],
	"archive_format": "zip"
}

scumm_platforms_master["mingw-w64"] = p
scumm_platforms_stable["mingw-w64"] = p
scumm_desktop_platforms.append("mingw-w64")

p_cplusplus11 = copy.deepcopy(p)

p_cplusplus11["configureargs"].extend( [
	"--enable-c++11"
] )

scumm_platforms_master["mingw-w64-cplusplus11"] = p_cplusplus11
scumm_platforms_stable["mingw-w64-cplusplus11"] = p_cplusplus11
scumm_buildonly_platforms.append("mingw-w64-cplusplus11")

# wii
scumm_root_wii = "/opt/toolchains/devkitPPC-r26"
scumm_env_wii = copy.deepcopy(scumm_env)
scumm_env_wii["PATH"] = "%s/devkitPPC/bin:%s" % (scumm_root_wii, DEFAULT_PATH)
scumm_env_wii["CXX"] = "ccache powerpc-eabi-g++"
scumm_env_wii["CXXFLAGS"] = "-isystem %s/3rd/include" % scumm_root_wii
scumm_env_wii["LDFLAGS"] = "-L%s/3rd/lib" % scumm_root_wii
scumm_env_wii["PKG_CONFIG_LIBDIR"] = "%s/3rd/lib/pkgconfig" % scumm_root_wii
scumm_env_wii["DEVKITPRO"] = "%s" % scumm_root_wii
scumm_env_wii["DEVKITPPC"] = "%s/devkitPPC" % scumm_root_wii

p = {
	"configureargs": [
		"--host=wii",
		"--enable-plugins",
		"--default-dynamic",
		"--enable-vkeybd"
	],
	"env": scumm_env_wii,
	"disttarget": "wiidist",
	"package": [ "wiidist/scummvm" ],
	"archive_format": "tar.xz"
}

scumm_platforms_master["wii"] = p
scumm_platforms_stable["wii"] = p

# gamecube
scumm_root_gc = "/opt/toolchains/devkitPPC-r26"
scumm_env_gc = copy.deepcopy(scumm_env)
scumm_env_gc["PATH"] = "%s/devkitPPC/bin:%s" % (scumm_root_gc, DEFAULT_PATH)
scumm_env_gc["CXX"] = "ccache powerpc-eabi-g++"
scumm_env_gc["CXXFLAGS"] = "-isystem %s/3rd/include" % scumm_root_gc
scumm_env_gc["LDFLAGS"] = "-L%s/3rd/lib" % scumm_root_gc
scumm_env_gc["PKG_CONFIG_LIBDIR"] = "%s/3rd/lib/pkgconfig" % scumm_root_gc
scumm_env_gc["DEVKITPRO"] = "%s" % scumm_root_gc
scumm_env_gc["DEVKITPPC"] = "%s/devkitPPC" % scumm_root_gc

p = {
	"configureargs": [
		"--host=gamecube",
		"--enable-plugins",
		"--default-dynamic",
		"--enable-vkeybd",
	],
	"env": scumm_env_gc,
	"disttarget": "wiidist",
	"package": [ "wiidist/scummvm" ],
	"archive_format": "tar.xz"
}

scumm_platforms_master["gamecube"] = p
scumm_platforms_stable["gamecube"] = p

# Nintendo DS
scumm_root_ds = "/opt/toolchains/devkitARM-r47"
scumm_env_ds = copy.deepcopy(scumm_env)
scumm_env_ds["PATH"] = "%s/devkitARM/bin:%s" % (scumm_root_ds, DEFAULT_PATH)
scumm_env_ds["CXX"] = "ccache arm-none-eabi-c++"
#scumm_env_ds["CXXFLAGS"] = "-isystem %s/include" % scumm_root_ds
#scumm_env_ds["LDFLAGS"] = "-L%s/lib" % scumm_root_ds
scumm_env_ds["DEVKITPRO"] = scumm_root_ds
scumm_env_ds["DEVKITARM"] = "%s/devkitARM" % scumm_root_ds

p_master = {
	"configureargs": [
		"--host=ds",
		"--enable-plugins",
		"--default-dynamic",
		"--disable-engine=grim,stark,icb"
	],
	"env": scumm_env_ds,
	#"strip": "%s/bin/arm-none-eabi-strip scummvm.elf" % scumm_root_ds,
	"package": [
		"scummvm.nds",
		"plugins"
	],
	"archive_format": "tar.xz"
}

p_stable = copy.deepcopy(p_master)

p_master["configureargs"].extend( [
	scumm_disable_heavy_engines_master
] )

p_stable["configureargs"].extend( [
	scumm_disable_heavy_engines_stable
] )

# scumm_platforms_master["ds"] = p_master
# scumm_platforms_stable["ds"] = p_stable
# scumm_untestable_platforms.append("ds")

# TODO: Add split static builds as per WinCE - See NDS backend makefile
# BASE_PARAM="--host=ds --disable-translation --disable-debug --disable-all-engines"
# a: EXTRA_PARAM="--enable-scumm"
# b: EXTRA_PARAM="--enable-sky --enable-queen"
# c: EXTRA_PARAM="--enable-agos"
# d: EXTRA_PARAM="--enable-gob --enable-cine --enable-agi"
# e: EXTRA_PARAM="--enable-saga --disable-mad"
# f: EXTRA_PARAM="--enable-kyra --disable-mad"
# g: EXTRA_PARAM="--enable-lure"
# h: EXTRA_PARAM="--enable-parallaction"
# i: EXTRA_PARAM="--enable-made --disable-mad"
# k: EXTRA_PARAM="--enable-cruise --disable-mad"

# Nintendo 3DS
scumm_root_3ds = "/opt/toolchains/3ds"
scumm_env_3ds = copy.deepcopy(scumm_env)
scumm_env_3ds["PATH"] = "%s/devkitARM/bin:%s/tools/bin:%s/portlibs/3ds/bin:%s" % (scumm_root_3ds, scumm_root_3ds, scumm_root_3ds, DEFAULT_PATH)
scumm_env_3ds["PKG_CONFIG_LIBDIR"] = "%s/portlibs/3ds/lib/pkgconfig" % scumm_root_3ds
scumm_env_3ds["CXX"] = "ccache arm-none-eabi-c++"
scumm_env_3ds["DEVKITPRO"] = scumm_root_3ds
scumm_env_3ds["DEVKITARM"] = "%s/devkitARM" % scumm_root_3ds
scumm_env_3ds["DIST_3DS_EXTRA_FILES"] = "%s/cacert.pem" % scumm_root_3ds

p_master = {
	"configureargs": [
		"--host=3ds",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_3ds,
	"disttarget": "dist_3ds",
	"package": [ "dist_3ds/*" ],
	"archive_format": "zip"
}

p_stable = copy.deepcopy(p_master)

scumm_platforms_master["3ds"] = p_master
scumm_platforms_stable["3ds"] = p_stable
scumm_untestable_platforms.append("3ds")

# Switch
scumm_root_switch = "/opt/toolchains/switch"
scumm_env_switch = copy.deepcopy(scumm_env)
scumm_env_switch["PATH"] = "%s/devkitpro/devkitA64/bin:%s/devkitpro/tools/bin:%s" % (scumm_root_switch, scumm_root_switch, DEFAULT_PATH)
scumm_env_switch["PKG_CONFIG_LIBDIR"] = "%s/devkitpro/portlibs/switch/lib/pkgconfig" % scumm_root_switch
scumm_env_switch["CXX"] = "ccache aarch64-none-elf-g++"
scumm_env_switch["DEVKITPRO"] = "%s/devkitpro" % (scumm_root_switch)

p_master = {
	"configureargs": [
		"--host=switch"
	],
	"env": scumm_env_switch,
	"disttarget": "switch_release",
	"package": [ "switch_release/*" ],
	"archive_format": "zip"
}

p_stable = copy.deepcopy(p_master)

scumm_platforms_master["switch"] = p_master
scumm_platforms_stable["switch"] = p_stable
scumm_untestable_platforms.append("switch")

# Mac OS X Intel
scumm_root_osx_intel = "/opt/toolchains/i686-apple-darwin9-10.4"
scumm_env_osx_intel = copy.deepcopy(scumm_env)
scumm_env_osx_intel["PATH"] = "%s/bin:%s/SDKs/MacOSX10.4u.sdk/usr/bin:%s" % (scumm_root_osx_intel, scumm_root_osx_intel, DEFAULT_PATH)
scumm_env_osx_intel["CXX"] = "ccache i686-apple-darwin9-g++"
scumm_env_osx_intel["CXXFLAGS"] = "-I %s/include -I %s/SDKs/MacOSX10.4u.sdk/usr/include/c++/4.0.0/ -I %s/SDKs/MacOSX10.4u.sdk/usr/include/c++/4.0.0/i686-apple-darwin9 -I %s/SDKs/MacOSX10.4u.sdk/usr/include" % (scumm_root_osx_intel,scumm_root_osx_intel,scumm_root_osx_intel,scumm_root_osx_intel)
scumm_env_osx_intel["LDFLAGS"] = "-L%s/lib -L%s/SDKs/MacOSX10.4u.sdk/usr/lib" % (scumm_root_osx_intel, scumm_root_osx_intel)
scumm_env_osx_intel["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_root_osx_intel

p = {
	"configureargs": [
		"--host=i686-apple-darwin9",
		"--disable-nasm",
		"--with-staticlib-prefix=%s" % scumm_root_osx_intel
	],
	"configureargs-tools": [
		"--host=i686-apple-darwin9"
	],
	"env": scumm_env_osx_intel,
	"disttarget": "bundle",
	#"disttarget-tools": "bundle", # bundle fails as GUI tools currently not built - WxWidgets library not present
	"package": [ "ScummVM.app" ],
	"package-tools": [
		"construct_mohawk",
		"create_sjisfnt",
		"decine",
		#"decompile", # Decompiler currently not built - BOOST library not present
		"degob",
		"dekyra",
		"descumm",
		"desword2",
		"extract_mohawk",
		"gob_loadcalc",
		"pegasus_save_types",
		#"scummvm-tools.app", # GUI tools currently not built - WxWidgets library not present
		"scummvm-tools-cli"
	],
	"archive_format": "tar.xz"
}

scumm_platforms_master["osx_intel"] = p
scumm_platforms_stable["osx_intel"] = p
scumm_desktop_platforms.append("osx_intel")

# Mac OS X Intel x64
scumm_root_osx_x64 = "/opt/toolchains/osxcross/target"
scumm_env_osx_x64 = copy.deepcopy(scumm_env)
scumm_env_osx_x64["PATH"] = "%s/bin:%s/SDK/MacOSX10.14.sdk/usr/bin:%s" % (scumm_root_osx_x64, scumm_root_osx_x64, DEFAULT_PATH)
scumm_env_osx_x64["CXX"] = "ccache o64-clang++"
scumm_env_osx_x64["CXXFLAGS"] = "-I %s/include -I %s/SDK/MacOSX10.14.sdk/usr/include" % (scumm_root_osx_x64,scumm_root_osx_x64)
scumm_env_osx_x64["LDFLAGS"] = "-L%s/lib -L%s/SDK/MacOSX10.14.sdk/usr/lib" % (scumm_root_osx_x64, scumm_root_osx_x64)
scumm_env_osx_x64["AR"] = "x86_64-apple-darwin18-ar"
scumm_env_osx_x64["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_root_osx_x64

p = {
	"configureargs": [
		"--host=x86_64-apple-darwin18",
		"--with-staticlib-prefix=%s" % scumm_root_osx_x64,
		"--disable-osx-dock-plugin"
	],
	"configureargs-tools": [
		"--host=x86_64-apple-darwin18"
	],
	"env": scumm_env_osx_x64,
	"disttarget": "bundle",
	#"disttarget-tools": "bundle", # bundle fails as GUI tools currently not built - WxWidgets library not present
	"package": [ "ScummVM.app" ],
	"package-tools": [
		"construct_mohawk",
		#"create_sjisfnt", # No freetype2 library
		"decine",
		#"decompile", # Decompiler currently not built - BOOST library not present
		"degob",
		"dekyra",
		"descumm",
		"desword2",
		"extract_mohawk",
		"gob_loadcalc",
		"pegasus_save_types",
		#"scummvm-tools.app", # GUI tools currently not built - WxWidgets library not present
		"scummvm-tools-cli"
	],
	"archive_format": "tar.xz"
}

scumm_platforms_master["osx_x64"] = p
scumm_platforms_stable["osx_x64"] = p
scumm_desktop_platforms.append("osx_x64")

# Mac OS X PPC
#
# FIXME: Due to toolchain issues and broken SDL development headers OS X PPC
# builds fail. If we can get the toolchain and the SDL development headers
# fixed we can enable this again.
#
#scumm_root_osx_ppc = "/opt/toolchains/powerpc-apple-darwin8-10.2"
#scumm_env_osx_ppc = copy.deepcopy(scumm_env)
#scumm_env_osx_ppc["PATH"] = "%s/bin:%s" % (scumm_root_osx_ppc, DEFAULT_PATH)
#scumm_env_osx_ppc["CXX"] = "ccache ppc-apple-darwin8-g++"
#scumm_env_osx_ppc["CXXFLAGS"] = "-fabi-version=1 -fno-use-cxa-atexit -I %s/include" % scumm_root_osx_ppc
#scumm_env_osx_ppc["LDFLAGS"] = "-L%s/lib -static-libgcc -ldl" % scumm_root_osx_ppc
#scumm_env_osx_ppc["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_root_osx_ppc
#scumm_env_osx_ppc["MACOSX_DEPLOYMENT_TARGET"] = "10.2"
#
#scumm_tools_env_osx_ppc = copy.deepcopy(scumm_env_osx_ppc)
#scumm_tools_env_osx_ppc["CXXFLAGS"] += " -I %s/include/stlport" % scumm_root_osx_ppc
#scumm_tools_env_osx_ppc["LDFLAGS"] += " -lstlport"
#
#p = {
#	"configureargs": [
#		"--host=ppc-apple-darwin8",
#		"--disable-freetype2", # 2014-04-18 Linking fails at packaging for nightly builds if Freetype library is enabled with errors of type "relocation overflow for relocation entry XX in section (__TEXT,__textcoal_nt) (displacement too large)"
#		"--disable-engines=mads", # 2014-05-26 Linking fails at packaging with similar error - FIXME: Need better solution longterm
#		"--with-staticlib-prefix=%s" % scumm_root_osx_ppc
#	],
#	"configureargs-tools": [
#		"--host=ppc-apple-darwin8"
#	],
#	"env": scumm_env_osx_ppc,
#	"env-tools": scumm_tools_env_osx_ppc,
#	"disttarget": "bundle",
#	#"disttarget-tools": "bundle", # bundle fails as GUI tools currently not built - WxWidgets library not present
#	"package": [ "ScummVM.app" ],
#	"package-tools": [
#		"construct_mohawk",
#		"create_sjisfnt",
#		"decine",
#		#"decompile", # Decompiler currently not built - BOOST library not present
#		"degob",
#		"dekyra",
#		"descumm",
#		"desword2",
#		"extract_mohawk",
#		"gob_loadcalc",
#		"pegasus_save_types",
#		#"scummvm-tools.app", # GUI tools currently not built - WxWidgets library not present
#		"scummvm-tools-cli"
#	],
#	"archive_format": "tar.xz"
#}
#
#scumm_platforms_master["osx_ppc"] = p
#scumm_platforms_stable["osx_ppc"] = p
#scumm_desktop_platforms.append("osx_ppc")

# iOS - Supposed to work on all devices. Targetting iOS 3.1.
scumm_root_ios = "/opt/toolchains/apple-ios"
scumm_root_ios_arch = "%s/arm-apple-darwin9" % scumm_root_ios
scumm_root_ios_libs = "%s/usr" % scumm_root_ios_arch

scumm_env_ios = copy.deepcopy(scumm_env)
scumm_env_ios["PATH"] = "%s/bin:%s/bin:%s/bin:%s" % (scumm_root_ios_libs, scumm_root_ios_arch, scumm_root_ios, DEFAULT_PATH)
scumm_env_ios["CXX"] = "ccache arm-apple-darwin9-clang++"
scumm_env_ios["CPPFLAGS"] = "-isystem %s/include" % scumm_root_ios_libs
scumm_env_ios["CXXFLAGS"] = "-Qunused-arguments"
scumm_env_ios["LDFLAGS"] = "-L%s/lib" % scumm_root_ios_libs
scumm_env_ios["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_root_ios_libs

p = {
	"configureargs": [
		"--host=iphone",
		"--with-staticlib-prefix=%s" % scumm_root_ios_libs,
		"--disable-debug", # llvm-dsymutil isn't working in the llvm version we use. Thus, disable debug information.
		"--enable-optimizations" # Performance without optimizations is rather bad on older devices, thus we enable them.
														 # TODO: If debug information work again at some point we should think of disabling
														 # optimizations again. Or at least switch to "-Og".
	],
	"env": scumm_env_ios,
	"disttarget": "iphonebundle",
	"package": [ "ScummVM.app" ],
	"archive_format": "tar.bz2"
}

scumm_platforms_master["ios"] = p
scumm_platforms_stable["ios"] = p

# iOS7 - Supposed to work on modern (iOS 7.1+) devices only. Targetting iOS 7.1.
scumm_root_ios7 = "/opt/toolchains/apple-ios"
scumm_root_ios7_arch = "%s/arm-apple-darwin11" % scumm_root_ios7
scumm_root_ios7_libs = "%s/usr" % scumm_root_ios7_arch

scumm_env_ios7 = copy.deepcopy(scumm_env)
scumm_env_ios7["PATH"] = "%s/bin:%s/bin:%s/bin:%s" % (scumm_root_ios7_libs, scumm_root_ios7_arch, scumm_root_ios7, DEFAULT_PATH)
scumm_env_ios7["CXX"] = "ccache arm-apple-darwin11-clang++"
scumm_env_ios7["CPPFLAGS"] = "-isystem %s/include" % scumm_root_ios7_libs
scumm_env_ios7["CXXFLAGS"] = "-Qunused-arguments"
scumm_env_ios7["LDFLAGS"] = "-L%s/lib" % scumm_root_ios7_libs
scumm_env_ios7["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_root_ios7_libs

p = {
	"configureargs": [
		"--host=ios7",
		"--with-staticlib-prefix=%s" % scumm_root_ios7_libs,
		"--disable-debug" # llvm-dsymutil isn't working in the llvm version we use. Thus, disable debug information.
	],
	"env": scumm_env_ios7,
	"disttarget": "ios7bundle",
	"package": [ "ScummVM.app" ],
	"archive_format": "tar.bz2"
}

scumm_platforms_master["ios7"] = p
scumm_platforms_stable["ios7"] = p


# iPhone - New Clang Toolchain as of 20140419
# Does not work on buildbot2 due to missing libraries. We could rebuild cctools
# to fix this and enable the toolchain again. Disabled for now.
# Disabled 20160212.
# TODO: Remove this in the future?
#scumm_root_iphone_clang = "/opt/toolchains/ios-clang3.3"
#scumm_libdir_iphone_clang = "%s/iPhoneOS3.1.2.sdk/usr/local" % scumm_root_iphone_clang
#scumm_env_iphone_clang = copy.deepcopy(scumm_env)
#scumm_env_iphone_clang["PATH"] = "%s/bin:%s/bin:%s" % (scumm_root_iphone_clang, scumm_libdir_iphone_clang, DEFAULT_PATH)
#scumm_env_iphone_clang["CXX"] = "ccache ios-clang++"
#scumm_env_iphone_clang["CXXFLAGS"] = "-Qunused-arguments -I%s/include" % scumm_libdir_iphone_clang
#scumm_env_iphone_clang["LDFLAGS"] = "-L%s/lib" % scumm_libdir_iphone_clang
#
#p = {
#	"configureargs": [
#		"--host=iphone",
#		"--with-staticlib-prefix=%s" % scumm_libdir_iphone_clang,
#		"--disable-debug" # dsymutil-osx fails breaking build. Disabling DWARF debug data with this avoids the use of this.
#	],
#	"env": scumm_env_iphone_clang,
#	"disttarget": "iphonebundle",
#	"package": [ "ScummVM.app" ],
#	"archive_format": "tar.bz2"
#}
#
#scumm_platforms_master["iphone-clang"] = p
#scumm_platforms_stable["iphone-clang"] = p

# PSP
scumm_root_psp = "/opt/toolchains/psp"
scumm_env_psp = copy.deepcopy(scumm_env)
scumm_env_psp["PATH"] = "%s/bin:%s" % (scumm_root_psp, DEFAULT_PATH)
scumm_env_psp["PKG_CONFIG_LIBDIR"] = "%s/psp/lib" % scumm_root_psp
scumm_env_psp["PKG_CONFIG_PATH"] = "%s/psp/lib/pkgconfig" % scumm_root_psp
scumm_env_psp["CXX"] = "ccache psp-g++"
scumm_env_psp["CXXFLAGS"] = "-isystem %s/include" % scumm_root_psp
scumm_env_psp["LDFLAGS"] = "-L%s/lib" % scumm_root_psp
scumm_env_psp["PSPDEV"] = scumm_root_psp

# HACK: The Ultima engine, when included, causes a crash in the add game dialog
# after selecting a game in the "Add Game" dialog and clicking on "Choose".
# This crash happens only on real hardware, but not on the PSP emulator PPSSPP.
# It was suggested that this is due to memory constraints on the platform.
# Due to this crash, we disable Ultima on PSP for now.
# Unstable engines are disabled because they cause a crash on real hardware when
# adding a game (see further comment in the pspfull buildbot target)
p_master = {
	"configureargs": [
		"--host=psp",
		"--disable-debug",
		"--enable-plugins",
		"--default-dynamic",
		"--disable-engine=ultima",
		"--disable-all-unstable-engines"
	],
	"env": scumm_env_psp,
	"package": [
		"EBOOT.PBP",
		"plugins"
	],
	"archive_format": "tar.xz"
}

p_stable = copy.deepcopy(p_master)

p_master["package"].extend( [
	"../../src-master/src/backends/platform/psp/kbd"
] )

p_stable["package"].extend( [
	"../../src-stable/src/backends/platform/psp/kbd"
] )

scumm_platforms_master["psp"] = p_master
scumm_platforms_stable["psp"] = p_stable

# PSPFULL
scumm_root_pspfull = "/opt/toolchains/psp"
scumm_env_pspfull = copy.deepcopy(scumm_env)
scumm_env_pspfull["PATH"] = "%s/bin:%s" % (scumm_root_pspfull, DEFAULT_PATH)
scumm_env_pspfull["PKG_CONFIG_LIBDIR"] = "%s/psp/lib" % scumm_root_pspfull
scumm_env_pspfull["PKG_CONFIG_PATH"] = "%s/psp/lib/pkgconfig" % scumm_root_pspfull
scumm_env_pspfull["CXX"] = "ccache psp-g++"
scumm_env_pspfull["CXXFLAGS"] = "-isystem %s/include" % scumm_root_pspfull
scumm_env_pspfull["LDFLAGS"] = "-L%s/lib" % scumm_root_pspfull
scumm_env_pspfull["PSPDEV"] = scumm_root_pspfull

# This psp build includes all unstable engines, but crashes when adding a game.
# The crash happens while it loads all the plugins to determine the engine
# that matches the game. It is a hard crash that requires removing and
# reinserting the battery. The crash does not happen on the PPSSPP emulator.

p_master = {
	"configureargs": [
		"--host=psp",
		"--disable-debug",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_pspfull,
	"package": [
		"EBOOT.PBP",
		"plugins"
	],
	"archive_format": "tar.xz"
}

p_stable = copy.deepcopy(p_master)

p_master["package"].extend( [
	"../../src-master/src/backends/platform/psp/kbd"
] )

p_stable["package"].extend( [
	"../../src-stable/src/backends/platform/psp/kbd"
] )

scumm_platforms_master["pspfull"] = p_master
scumm_platforms_stable["pspfull"] = p_stable
scumm_buildonly_platforms.append("pspfull")

# PSP2
scumm_root_psp2 = "/opt/toolchains/psp2"
scumm_env_psp2 = copy.deepcopy(scumm_env)
scumm_env_psp2["PATH"] = "%s/vitasdk/bin:%s" % (scumm_root_psp2, DEFAULT_PATH)
scumm_env_psp2["PKG_CONFIG_LIBDIR"] = "%s/vitasdk/arm-vita-eabi/lib/pkgconfig" % scumm_root_psp2
scumm_env_psp2["CXX"] = "ccache arm-vita-eabi-g++"
scumm_env_psp2["VITASDK"] = "%s/vitasdk" % (scumm_root_psp2)

p_master = {
	"configureargs": [
		"--host=psp2"
	],
	"env": scumm_env_psp2,
	"disttarget": "psp2vpk",
	"package": [ "scummvm.vpk" ],
	"archive_format": "zip"
}

p_stable = copy.deepcopy(p_master)

# HACK: To prevent memory-related crash on startup that seems related to the size of the executable
# file, which grows with number of engines, we need to disable some of the engines...
# Blade Runner is unplayably slow on the Vita.
# Stark engine doesn't have a supported renderer on Vita.
# Myst 3 engine is unplayably slow on Vita.
# Glk is not very usable on Vita without a keyboard.
p_master["configureargs"].extend( [
	"--disable-all-unstable-engines",
	"--disable-engines=glk",
	"--disable-engines=bladerunner",
	"--disable-engines=stark",
	"--disable-engines=myst3"
] )

p_stable["configureargs"].extend( [
	"--disable-all-unstable-engines",
	"--disable-engines=glk",
	"--disable-engines=bladerunner"
] )

scumm_platforms_master["psp2"] = p_master
scumm_platforms_stable["psp2"] = p_stable
scumm_untestable_platforms.append("psp2")

#PSP2FULL
# This Vita build includes all engines, but crashes on startup.
# The crash presumably happens due to the large executable size.
scumm_root_psp2full = "/opt/toolchains/psp2"
scumm_env_psp2full = copy.deepcopy(scumm_env)
scumm_env_psp2full["PATH"] = "%s/vitasdk/bin:%s" % (scumm_root_psp2full, DEFAULT_PATH)
scumm_env_psp2full["PKG_CONFIG_LIBDIR"] = "%s/vitasdk/arm-vita-eabi/lib/pkgconfig" % scumm_root_psp2full
scumm_env_psp2full["CXX"] = "ccache arm-vita-eabi-g++"
scumm_env_psp2full["VITASDK"] = "%s/vitasdk" % (scumm_root_psp2full)

p_master = {
	"configureargs": [
		"--host=psp2"
	],
	"env": scumm_env_psp2full,
	"disttarget": "psp2vpk",
	"package": [ "scummvm.vpk" ],
	"archive_format": "zip"
}

p_stable = copy.deepcopy(p_master)

scumm_platforms_master["psp2full"] = p_master
scumm_platforms_stable["psp2full"] = p_stable
scumm_buildonly_platforms.append("psp2full")

# PS2
scumm_root_ps2 = "/opt/toolchains/ps2-gcc-3.2.3"
scumm_env_ps2 = copy.deepcopy(scumm_env)
scumm_env_ps2["PATH"] = "%s/bin:%s/ee/bin:%s/iop/bin:%s/dvp/bin:%s/ps2sdk/bin:%s" % \
						(scumm_root_ps2, scumm_root_ps2, scumm_root_ps2, scumm_root_ps2, scumm_root_ps2, DEFAULT_PATH)
scumm_env_ps2["CXX"] = "ccache ee-g++"
scumm_env_ps2["PS2DEV"] = scumm_root_ps2
scumm_env_ps2["PS2SDK"] = "%s/ps2sdk" % scumm_root_ps2

p = {
	"configureargs": [
		"--host=ps2",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_ps2,
	"strip": "%s/ee/bin/ee-strip --strip-debug scummvm.elf" % scumm_root_ps2,
	"package": [
		"scummvm.elf",
		"plugins"
	],	# TODO/FIXME: What to package?
	"archive_format": "tar.xz"
}

#scumm_platforms_master["ps2"] = p
#scumm_platforms_stable["ps2"] = p
#scumm_untestable_platforms.append("ps2")

# GP2X
scumm_root_gp2x = "/opt/toolchains/open2x-gcc-4.1.1"
scumm_env_gp2x = copy.deepcopy(scumm_env)
scumm_env_gp2x["PATH"] = "%s/bin:%s" % (scumm_root_gp2x, DEFAULT_PATH)
scumm_env_gp2x["CXX"] = "ccache arm-open2x-linux-g++"
scumm_env_gp2x["CXXFLAGS"] = "-isystem %s/include" % scumm_root_gp2x
scumm_env_gp2x["LDFLAGS"] = "-L%s/lib" % scumm_root_gp2x
scumm_env_gp2x["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_root_gp2x

p_master = {
	"configureargs": [
		"--host=gp2x",
		"--enable-vkeybd"
	],
	"env": scumm_env_gp2x,
	"disttarget": "gp2x-bundle",
	"package": [ "release/scummvm-gp2x.tar.bz2" ],
	"archive_format": "tar.bz2"
}

p_stable = copy.deepcopy(p_master)

# Disabling glk engine because of executable size constraints
p_master["configureargs"].extend( [
	"--disable-engines=glk"
] )

p_master["configureargs"].extend( [
	scumm_disable_heavy_engines_master
] )

p_stable["configureargs"].extend( [
	scumm_disable_heavy_engines_stable
] )

#scumm_platforms_master["gp2x"] = p_master
#scumm_platforms_stable["gp2x"] = p_stable

# GP2X Wiz
scumm_root_gp2xwiz = "/opt/toolchains/open2x-gcc-4.1.1"
scumm_env_gp2xwiz = copy.deepcopy(scumm_env)
scumm_env_gp2xwiz["PATH"] = "%s/bin:%s" % (scumm_root_gp2xwiz, DEFAULT_PATH)
scumm_env_gp2xwiz["CXX"] = "ccache arm-open2x-linux-g++"
scumm_env_gp2xwiz["CXXFLAGS"] = "-isystem %s/include" % scumm_root_gp2xwiz
scumm_env_gp2xwiz["LDFLAGS"] = "-L%s/lib" % scumm_root_gp2xwiz
scumm_env_gp2xwiz["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_root_gp2xwiz

p_master = {
	"configureargs": [
		"--host=gp2xwiz",
		"--enable-vkeybd",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_gp2xwiz,
	"disttarget": "gp2xwiz-bundle",
	"package": [ "release/scummvm-gp2xwiz.tar.bz2" ],
	"archive_format": "tar.bz2"
}

p_stable = copy.deepcopy(p_master)

p_master["configureargs"].extend( [
	scumm_disable_heavy_engines_master
] )

p_stable["configureargs"].extend( [
	scumm_disable_heavy_engines_stable
] )

scumm_platforms_master["gp2xwiz"] = p_master
scumm_platforms_stable["gp2xwiz"] = p_stable

# DC
scumm_root_dc = "/opt/toolchains/dc"
scumm_env_dc = copy.deepcopy(scumm_env)
scumm_env_dc["PATH"] = "%s/bin:%s" % (scumm_root_dc, DEFAULT_PATH)
scumm_env_dc["CXX"] = "ccache sh-elf-g++"
scumm_env_dc["RONINDIR"] = "%s/ronin" % scumm_root_dc
scumm_env_dc["IP_TEMPLATE_FILE"] = "/opt/extras-dc/IP.TMPL"
scumm_env_dc["DC_IMAGE_EXTRA_DIR"] = "/opt/extras-dc/demos"
scumm_env_dc["LD_LIBRARY_PATH"] = "/opt/toolchains/legacy-shared-objects"

p = {
	"configureargs": [
		"--host=dreamcast",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_dc,
	"disttarget": "dcdist",
	"package": [ "dcdist/scummvm" ],
	"archive_format": "tar.xz"
}

scumm_platforms_master["dc"] = p
scumm_platforms_stable["dc"] = p

p_serial = copy.deepcopy(p)

p_serial["configureargs"].extend( [
	"--enable-debug"
] )

scumm_platforms_master["dc-serial"] = p_serial
scumm_platforms_stable["dc-serial"] = p_serial

# Windows CE
scumm_root_wince = "/opt/toolchains/mingw32ce-0.59.1"
scumm_env_wince = copy.deepcopy(scumm_env)
scumm_env_wince["PATH"] = "%s/bin:%s" % (scumm_root_wince, DEFAULT_PATH)
scumm_env_wince["CXX"] = "ccache arm-mingw32ce-g++"
scumm_env_wince["CXXFLAGS"] = "-isystem %s/arm-mingw32ce/include -I%s/libraries/include -I%s/libraries/include/SDL" % (scumm_root_wince, scumm_root_wince, scumm_root_wince)
scumm_env_wince["LDFLAGS"] = "-L%s/arm-mingw32ce/lib -L%s/libraries/lib" % (scumm_root_wince, scumm_root_wince)
# HACK: The toolchain was built using libraries not available in recent Debian
# releases. We keep a copy of the old libraries around and use LD_LIBRARY_PATH
# to have ld.so find them.
scumm_env_wince["LD_LIBRARY_PATH"] = "/opt/toolchains/legacy-shared-objects"

p = {
	"configureargs": [
		"--host=wince"
	],
	"env": scumm_env_wince,
	"strip": "%s/bin/arm-mingw32ce-strip scummvm.exe" % scumm_root_wince,
	"package": [ "scummvm.exe" ],
	"archive_format": "zip"
}

# scumm_platforms_master["wince"] = p
# scumm_platforms_stable["wince"] = p

p_split1 = copy.deepcopy(p)

p_split1["configureargs"].extend( [
	"--disable-all-engines",
	"--enable-engines=scumm,agi,cruise,draci,lure,queen,sky,sword1,tinsel,touche"
] )

# scumm_platforms_master["wince-split1"] = p_split1
# scumm_platforms_stable["wince-split1"] = p_split1

p_split2 = copy.deepcopy(p)

p_split2["configureargs"].extend( [
	"--disable-all-engines",
	"--enable-engines=agos,cine,drascula,gob,groovie,kyra,lol,made,parallaction,saga,teenagent,tucker"
] )

# scumm_platforms_master["wince-split2"] = p_split2
# scumm_platforms_stable["wince-split2"] = p_split2

p_split3 = copy.deepcopy(p)

p_split3["configureargs"].extend( [
	"--disable-all-engines",
	"--enable-engines=hugo,mohawk,sci,sword2,toon,tsage,cge,composer,dreamweb"
] )

# scumm_platforms_master["wince-split3"] = p_split3
# scumm_platforms_stable["wince-split3"] = p_split3

# motoezx
scumm_root_motoezx = "/opt/toolchains/motoezx"
scumm_env_motoezx = copy.deepcopy(scumm_env)
scumm_env_motoezx["PATH"] = "%s/bin:%s/crosstool/bin:%s" % (scumm_root_motoezx, scumm_root_motoezx, DEFAULT_PATH)
scumm_env_motoezx["CXX"] = "ccache arm-linux-gnu-g++"
scumm_env_motoezx["CXXFLAGS"] = "-isystem %s/include" % (scumm_root_motoezx)
scumm_env_motoezx["LDFLAGS"] = "-L%s/lib" % scumm_root_motoezx
scumm_env_motoezx["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_root_motoezx

p = {
	"configureargs": [
		"--host=motoezx",
		"--enable-vkeybd"
	],
	"env": scumm_env_motoezx,
	"disttarget": "motoezx",
	"package": [ "release/ScummVM-motoezx.pkg" ],
	"archive_format": "tar.xz"
}

#scumm_platforms_master["motoezx"] = p
#scumm_platforms_stable["motoezx"] = p

# motomagx
scumm_root_motomagx = "/opt/toolchains/motomagx/arm-eabi2"
scumm_env_motomagx = copy.deepcopy(scumm_env)
scumm_env_motomagx["PATH"] = "%s/bin:%s" % (scumm_root_motomagx, DEFAULT_PATH)
scumm_env_motomagx["CXX"] = "ccache arm-linux-gnueabi-g++"
scumm_env_motomagx["CXXFLAGS"] = "-isystem %s/include" % (scumm_root_motomagx)
scumm_env_motomagx["LDFLAGS"] = "-L%s/lib" % scumm_root_motomagx
scumm_env_motomagx["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_root_motomagx

p = {
	"configureargs": [
		"--host=motomagx",
		"--enable-vkeybd"
	],
	"env": scumm_env_motomagx,
	"disttarget": "motomagx-mpkg",
	"package": [ "release/ScummVM-motomagx.mpkg" ],
	"archive_format": "tar.xz"
}

#scumm_platforms_master["motomagx"] = p
#scumm_platforms_stable["motomagx"] = p

# n64
scumm_root_n64 = "/opt/toolchains/mips64-n64"
scumm_env_n64 = copy.deepcopy(scumm_env)
scumm_env_n64["PATH"] = "%s/bin:%s" % (scumm_root_n64, DEFAULT_PATH)
scumm_env_n64["CXX"] = "ccache mips64-g++"
scumm_env_n64["N64SDK"] = "/opt/toolchains/mips64-n64"
# HACK: The toolchain was built using libraries not available in recent Debian
# releases. We keep a copy of the old libraries around and use LD_LIBRARY_PATH
# to have ld.so find them.
scumm_env_n64["LD_LIBRARY_PATH"] = "/opt/toolchains/legacy-shared-objects"

p = {
	"configureargs": [
		"--host=n64",
		"--disable-all-engines",
		"--enable-engine=scumm,gob",
		"--enable-vkeybd"
	],
	"env": scumm_env_n64,
	"strip": "%s/bin/mips64-strip scummvm.elf" % scumm_root_n64,
	"package": [ "scummvm.elf" ],
	"archive_format": "tar.xz"
}

scumm_platforms_master["n64"] = p
scumm_platforms_stable["n64"] = p

# dingux
scumm_root_dingux = "/opt/toolchains/dingux-mipsel"
scumm_env_dingux = copy.deepcopy(scumm_env)
scumm_env_dingux["PATH"] = "%s/usr/bin:%s" % (scumm_root_dingux, DEFAULT_PATH)
scumm_env_dingux["CXX"] = "ccache mipsel-linux-g++"
scumm_env_dingux["PKG_CONFIG_LIBDIR"] = "%s/usr/lib/pkgconfig" % scumm_root_dingux
# HACK: The toolchain was built using libraries not available in recent Debian
# releases. We keep a copy of the old libraries around and use LD_LIBRARY_PATH
# to have ld.so find them.
scumm_env_dingux["LD_LIBRARY_PATH"] = "/opt/toolchains/legacy-shared-objects"

p = {
	"configureargs": [
		"--host=dingux",
		"--enable-plugins",
		"--default-dynamic",
		"--enable-vkeybd",
		"--disable-theoradec"
	],
	"env": scumm_env_dingux,
	"package": [
		"scummvm",
		"plugins"
	],
	"archive_format": "tar.xz"
}

scumm_platforms_master["dingux"] = p
scumm_platforms_stable["dingux"] = p

# OpenPandora

scumm_root_openpandora = "/opt/toolchains/arm-angstrom-openpandora"
scumm_env_openpandora = copy.deepcopy(scumm_env)
scumm_env_openpandora["PATH"] = "%s/bin:%s" % (scumm_root_openpandora, DEFAULT_PATH)
scumm_env_openpandora["CXX"] = "ccache arm-angstrom-linux-gnueabi-g++"
scumm_env_openpandora["PKG_CONFIG_LIBDIR"] = "%s/arm-angstrom-linux-gnueabi/usr/lib/pkgconfig" % scumm_root_openpandora
# HACK: The toolchain was built using libraries not available in recent Debian
# releases. We keep a copy of the old libraries around and use LD_LIBRARY_PATH
# to have ld.so find them.
scumm_env_openpandora["LD_LIBRARY_PATH"] = "/opt/toolchains/legacy-shared-objects"

# HACK: The Kyra Engine fails to link, probably due to a toolchain bug.
# This happens in sequences_darkmoon.cpp:1480
# Disabling EOB is a workaround until someone decides to fix it.
p = {
	"configureargs": [
		"--host=openpandora",
		"--enable-plugins",
		"--default-dynamic",
		"--disable-engine=eob",
		"--with-sdl-prefix=%s/arm-angstrom-linux-gnueabi/usr" % scumm_root_openpandora,
		"--with-freetype2-prefix=%s/arm-angstrom-linux-gnueabi/usr" % scumm_root_openpandora
	],
	"env": scumm_env_openpandora,
	"disttarget": "op-pnd",
	"package": [ "release/scummvm-op-pnd.tar.bz2" ],
	"archive_format": "tar.bz2"
}

scumm_platforms_master["openpandora"] = p
scumm_platforms_stable["openpandora"] = p

# GPH Caanoo
# SDK_PATH and TARGET_SYS are exported as they are used in the platforms SDL_CONFIG.

scumm_root_caanoo = "/opt/toolchains/arm-caanoo"
scumm_env_caanoo = copy.deepcopy(scumm_env)
scumm_env_caanoo["SDK_PATH"] = "%s" % scumm_root_caanoo
scumm_env_caanoo["TARGET_SYS"] = "arm-none-linux-gnueabi"
scumm_env_caanoo["PATH"] = "%s/bin:%s" % (scumm_root_caanoo, DEFAULT_PATH)
scumm_env_caanoo["CXX"] = "ccache arm-none-linux-gnueabi-g++"
scumm_env_caanoo["CXXFLAGS"] = "-isystem %s/arm-none-linux-gnueabi/usr/include" % scumm_root_caanoo
scumm_env_caanoo["LDFLAGS"] = "-L%s/arm-none-linux-gnueabi/usr/lib" % scumm_root_caanoo
scumm_env_caanoo["PKG_CONFIG_LIBDIR"] = "%s/arm-none-linux-gnueabi/usr/lib/pkgconfig" % scumm_root_caanoo

p_master = {
	"configureargs": [
		"--host=caanoo",
		"--enable-vkeybd",
		"--enable-plugins",
		"--default-dynamic",
		"--with-sdl-prefix=%s/arm-none-linux-gnueabi/usr" % scumm_root_caanoo,
		"--with-freetype2-prefix=%s/arm-none-linux-gnueabi/usr" % scumm_root_caanoo
	],
	"env": scumm_env_caanoo,
	"disttarget": "caanoo-bundle",
	"package": [ "release/scummvm-caanoo.tar.bz2" ],
	"archive_format": "tar.bz2"
}

p_stable = copy.deepcopy(p_master)

p_master["configureargs"].extend( [
	scumm_disable_heavy_engines_master
] )

p_stable["configureargs"].extend( [
	scumm_disable_heavy_engines_stable
] )

scumm_platforms_master["caanoo"] = p_master
scumm_platforms_stable["caanoo"] = p_stable

# GCW0
scumm_root_gcw0 = "/opt/gcw0-toolchain"
scumm_env_gcw0 = copy.deepcopy(scumm_env)
scumm_env_gcw0["PATH"] = "%s/usr/bin:%s" % (scumm_root_gcw0, DEFAULT_PATH)
scumm_env_gcw0["CXX"] = "ccache mipsel-linux-g++"
scumm_env_gcw0["PKG_CONFIG_LIBDIR"] = "%s/usr/mipsel-gcw0-linux-uclibc/sysroot/usr/lib/pkgconfig" % scumm_root_gcw0

p = {
	"configureargs": [
		"--host=gcw0",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_gcw0,
	"package": [
		"scummvm.opk"
	],
	"disttarget": "gcw-opk",
	"archive_format": "tar.bz2"
}

scumm_platforms_master["gcw0"] = p
scumm_platforms_stable["gcw0"] = p

# Android - Shared (post Jul 20 2020)
scumm_root_android = "/opt/toolchains/android/2020-07-20"
scumm_env_android = copy.deepcopy(scumm_env)

# build-tools folder has tools like zipalign (used post-build for apks that need aligning)
scumm_android_btools_version = "29.0.3"
scumm_android_ndk_version = "21.3.6528147"
scumm_env_android["ANDROID_SDK_ROOT"]  = scumm_root_android
scumm_env_android["ANDROID_NDK_ROOT"]  = "%s/ndk/%s" % (scumm_root_android, scumm_android_ndk_version)
scumm_env_android["ANDROID_TOOLCHAIN"] = "%s/toolchains/llvm/prebuilt/linux-x86_64" % scumm_env_android["ANDROID_NDK_ROOT"]
scumm_env_android["PATH"] = "%s/tools:%s/build-tools/%s:%s" % (scumm_env_android["ANDROID_SDK_ROOT"], scumm_env_android["ANDROID_SDK_ROOT"], scumm_android_btools_version, DEFAULT_PATH)

# Android - ARM-V7A
scumm_env_android_arm_v7a = copy.deepcopy(scumm_env_android)
scumm_android_v7a_3rd_libs_path = "%s/libraries/armv7a" % scumm_root_android

scumm_env_android_arm_v7a["PATH"] = "%s/bin:%s/bin:%s" % (scumm_env_android["ANDROID_TOOLCHAIN"], scumm_android_v7a_3rd_libs_path, scumm_env_android["PATH"])

scumm_env_android_arm_v7a["CXXFLAGS"] = "-I%s/include" % scumm_android_v7a_3rd_libs_path
scumm_env_android_arm_v7a["LDFLAGS"] = "-L%s/lib" % scumm_android_v7a_3rd_libs_path
scumm_env_android_arm_v7a["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_android_v7a_3rd_libs_path

p = {
	"configureargs": [
		"--host=android-arm-v7a",
		"--enable-debug"
	],
	"env": scumm_env_android_arm_v7a,
	"disttarget": "androiddistdebug",
	"package": [ "debug" ],
	"archive_format": "zip"
}

scumm_platforms_master["android_arm_v7a"] = p
scumm_platforms_stable["android_arm_v7a"] = p
scumm_untestable_platforms.append("android_arm_v7a")

# Android - ARM64-V8A
scumm_env_android_arm64_v8a = copy.deepcopy(scumm_env_android)
scumm_android_v8a_3rd_libs_path = "%s/libraries/aarch64" % scumm_root_android

scumm_env_android_arm64_v8a["PATH"] = "%s/bin:%s/bin:%s" % (scumm_env_android["ANDROID_TOOLCHAIN"], scumm_android_v8a_3rd_libs_path, scumm_env_android["PATH"])

scumm_env_android_arm64_v8a["CXXFLAGS"] = "-I%s/include" % scumm_android_v8a_3rd_libs_path
scumm_env_android_arm64_v8a["LDFLAGS"] = "-L%s/lib" % scumm_android_v8a_3rd_libs_path
scumm_env_android_arm64_v8a["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_android_v8a_3rd_libs_path

p = {
	"configureargs": [
		"--host=android-arm64-v8a",
		"--enable-debug"
	],
	"env": scumm_env_android_arm64_v8a,
	"disttarget": "androiddistdebug",
	"package": [ "debug" ],
	"archive_format": "zip"
}

scumm_platforms_master["android_arm64"] = p
scumm_platforms_stable["android_arm64"] = p
scumm_untestable_platforms.append("android_arm64")

# Android - x86
scumm_env_android_x86 = copy.deepcopy(scumm_env_android)
scumm_android_x86_3rd_libs_path = "%s/libraries/i686" % scumm_root_android

scumm_env_android_x86["PATH"] = "%s/bin:%s/bin:%s" % (scumm_env_android["ANDROID_TOOLCHAIN"], scumm_android_x86_3rd_libs_path, scumm_env_android["PATH"])

scumm_env_android_x86["CXXFLAGS"] = "-I%s/include" % scumm_android_x86_3rd_libs_path
scumm_env_android_x86["LDFLAGS"] = "-L%s/lib" % scumm_android_x86_3rd_libs_path
scumm_env_android_x86["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_android_x86_3rd_libs_path

p = {
	"configureargs": [
		"--host=android-x86",
		"--enable-debug"
	],
	"env": scumm_env_android_x86,
	"disttarget": "androiddistdebug",
	"package": [ "debug" ],
	"archive_format": "zip"
}

scumm_platforms_master["android_x86"] = p
scumm_platforms_stable["android_x86"] = p
scumm_untestable_platforms.append("android_x86")

# Android - x86_64
scumm_env_android_x86_64 = copy.deepcopy(scumm_env_android)
scumm_android_x86_64_3rd_libs_path = "%s/libraries/x86_64" % scumm_root_android

scumm_env_android_x86_64["PATH"] = "%s/bin:%s/bin:%s" % (scumm_env_android["ANDROID_TOOLCHAIN"], scumm_android_x86_64_3rd_libs_path, scumm_env_android["PATH"])

scumm_env_android_x86_64["CXXFLAGS"] = "-I%s/include" % scumm_android_x86_64_3rd_libs_path
scumm_env_android_x86_64["LDFLAGS"] = "-L%s/lib" % scumm_android_x86_64_3rd_libs_path
scumm_env_android_x86_64["PKG_CONFIG_LIBDIR"] = "%s/lib/pkgconfig" % scumm_android_x86_64_3rd_libs_path

p = {
	"configureargs": [
		"--host=android-x86_64",
		"--enable-debug"
	],
	"env": scumm_env_android_x86_64,
	"disttarget": "androiddistdebug",
	"package": [ "debug" ],
	"archive_format": "zip"
}

scumm_platforms_master["android_x86_64"] = p
scumm_platforms_stable["android_x86_64"] = p
scumm_untestable_platforms.append("android_x86_64")

# # deprecated - OUYA (Android ARM)
# scumm_env_ouya = copy.deepcopy(scumm_env_android)
# scumm_env_ouya["STANDALONE_TOOLCH"] = "%s/standalone-toolchain-arm-ndk-r14b-api-16" % scumm_root_android
# scumm_env_ouya["STANDALONE_TRIBLE"] = "arm-linux-androideabi"
# scumm_env_ouya["PATH"] = "%s/bin:%s" % (scumm_env_ouya["STANDALONE_TOOLCH"], DEFAULT_PATH)
# scumm_env_ouya["CXX"] = "ccache %s-clang++" % scumm_env_ouya["STANDALONE_TRIBLE"]
# scumm_env_ouya["CXXFLAGS"] = "-isystem %s/OUYA-3rd-android-4-armeabi-v7a-debug/include" % scumm_root_android
# scumm_env_ouya["LDFLAGS"] = "-L%s/OUYA-3rd-android-4-armeabi-v7a-debug/lib" % scumm_root_android
# scumm_env_ouya["PKG_CONFIG_LIBDIR"] = "%s/OUYA-3rd-android-4-armeabi-v7a-debug/lib/pkgconfig" % scumm_root_android

# p = {
# 	"configureargs": [
# 		"--host=ouya",
# 		"--enable-debug",
# 		"--disable-mt32emu" # the mt32 emulator does not build due to stdc++ issues
# 	],
# 	"env": scumm_env_ouya,
# 	"disttarget": "androiddistdebug",
# 	"package": [ "debug" ],
# 	"archive_format": "zip"
# }

# scumm_platforms_master["ouya"] = p
# scumm_platforms_stable["ouya"] = p
# scumm_untestable_platforms.append("ouya")

# WebOS
scumm_root_webos = "/opt/toolchains/webos"
scumm_env_webos = copy.deepcopy(scumm_env)
scumm_env_webos["PATH"] = "%s/PalmPDK/arm-gcc/bin:%s/PalmPDK/bin:%s" % (scumm_root_webos, scumm_root_webos, DEFAULT_PATH)
scumm_env_webos["CXX"] = "ccache arm-none-linux-gnueabi-g++"
scumm_env_webos["PKG_CONFIG_LIBDIR"] = "%s/PalmPDK/device/usr/lib/pkgconfig" % scumm_root_webos
scumm_env_webos["WEBOS_SDK"] = "%s/PalmSDK/Current" % scumm_root_webos
scumm_env_webos["WEBOS_PDK"] = "%s/PalmPDK" % scumm_root_webos

p = {
	"configureargs": [
		"--host=webos",
		"--enable-plugins",
		"--default-dynamic",
		"--disable-cloud"
	],
	"env": scumm_env_webos,
	"disttarget": "package",
	"package": [ "portdist" ],
	"archive_format": "tar.xz"
}

#scumm_platforms_master["webos"] = p
#scumm_platforms_stable["webos"] = p

# PS3
scumm_root_ps3 = "/opt/toolchains/ps3-gcc-7.2.0"
scumm_env_ps3 = copy.deepcopy(scumm_env)
scumm_env_ps3["PATH"] = "%s/bin:%s/ppu/bin:%s/spu/bin:%s" % (scumm_root_ps3, scumm_root_ps3, scumm_root_ps3, DEFAULT_PATH)
scumm_env_ps3["CXX"] = "ccache powerpc64-ps3-elf-g++"
scumm_env_ps3["PKG_CONFIG_LIBDIR"] = "%s/portlibs/ppu/lib/pkgconfig" % scumm_root_ps3
scumm_env_ps3["PS3DEV"] = scumm_root_ps3
scumm_env_ps3["PSL1GHT"] = scumm_root_ps3
scumm_env_ps3["DIST_PS3_EXTRA_FILES"] = "%s/cacert.pem" % scumm_root_ps3

p = {
	"configureargs": [
		"--host=ps3"
	],
	"env": scumm_env_ps3,
	"disttarget": "ps3pkg",
	"package": [ "scummvm-ps3.pkg" ],
	"archive_format": "tar.xz"
}

scumm_platforms_master["ps3"] = p
scumm_platforms_stable["ps3"] = p

# Amiga OS4
scumm_root_amigaos4 = "/opt/toolchains/amigaos4-gcc-8.3.0"
scumm_env_amigaos4 = copy.deepcopy(scumm_env)
scumm_env_amigaos4["PATH"] = "%s/bin:%s/ppc-amigaos/bin:%s" % (scumm_root_amigaos4, scumm_root_amigaos4, DEFAULT_PATH)
scumm_env_amigaos4["CXX"] = "ccache ppc-amigaos-g++"
scumm_env_amigaos4["LDFLAGS"] = "-athread=native"
scumm_env_amigaos4["PKG_CONFIG_LIBDIR"] = "%s/ppc-amigaos/lib/pkgconfig" % scumm_root_amigaos4

p_master = {
	"configureargs": [
		"--host=ppc-amigaos",
		"--enable-static"
	],
	"configureargs-tools": [
		"--host=ppc-amigaos"
	],
	"env": scumm_env_amigaos4,
	"disttarget": "amigaosdist",
	"disttarget-tools": "amigaosdist",
	"package": [ "Games:ScummVM", "Games:ScummVM.info" ],
	"package-tools": [
		"construct_mohawk",
		"create_sjisfnt",
		"decine",
		#"decompile", # Decompiler currently not built - BOOST library not present
		"degob",
		"dekyra",
		"descumm",
		"desword2",
		"extract_mohawk",
		"gob_loadcalc",
		#"scummvm-tools", # GUI tools currently not built - WxWidgets library not present
		"scummvm-tools-cli"
	],
	"archive_format": "zip"
}

p_stable = copy.deepcopy(p_master)
p_stable["disttarget"] = "amigaosdist"

scumm_platforms_master["amigaos4"] = p_master
scumm_platforms_stable["amigaos4"] = p_stable
scumm_desktop_platforms.append("amigaos4")

# TODO: We don't supply schedulers. This causes configuration errors in modern buildmasters.
#scumm_platforms_other = copy.deepcopy(scumm_platforms_master)
scumm_platforms_other = {}

#######
####### buildbot setup
#######

c = BuildmasterConfig = {}

####### BUILDSLAVES

# The slave buildbots.

from buildbot.buildslave import BuildSlave

# the fetching schedulers count as build too, and since its waiting for
# the compiling builders, we need at least 2 concurrent jobs
slave_vm2 = "ScummVM Slave #1"

c["slaves"] = [ BuildSlave(slave_vm2, scummsecret.pwd_localslave) ]
c["protocols"] = {"pb": {"port": "tcp:9989:interface=127.0.0.1"}}

####### SCHEDULERS

# Only fetch changes, these checkouts are used by all compile runs.

from buildbot.scheduler import Nightly, Triggerable
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler, StringParameter, BooleanParameter
from buildbot.changes.filter import ChangeFilter

s_master = SingleBranchScheduler(name = "fetch-master",
					change_filter=ChangeFilter(repository = scumm_changeurl, branch = scumm_branch_master),
					treeStableTimer = 5,
					builderNames = [ "fetch-master" ])

s_stable = SingleBranchScheduler(name = "fetch-stable",
					change_filter=ChangeFilter(repository = scumm_changeurl, branch = scumm_branch_stable),
					treeStableTimer = 5,
					builderNames = [ "fetch-stable" ])

s_tools_master = SingleBranchScheduler(name = "fetch-tools-master",
					change_filter=ChangeFilter(repository = scumm_tools_changeurl, branch = scumm_tools_branch_master),
					treeStableTimer = 5,
					builderNames = [ "fetch-tools-master" ])

s_other = SingleBranchScheduler(name = "fetch-other",
					change_filter=ChangeFilter(repository = scumm_other_changeurl, branch = scumm_other_branch),
					treeStableTimer = 5,
					builderNames = [ "fetch-other" ])

# The building schedulers, starting the associated builders

builders_master = []
for i in scumm_platforms_master.keys():
	builders_master.append("master-%s" % i)

s_build_master = Triggerable(name = "master", builderNames = builders_master)

builders_stable = []
for i in scumm_platforms_stable.keys():
	builders_stable.append("stable-%s" % i)

s_build_stable = Triggerable(name = "stable", builderNames = builders_stable)

# Tools built on desktop platforms only
builders_tools_master = []
for i in scumm_desktop_platforms:
	builders_tools_master.append("tools-master-%s" % i)

s_build_tools_master = Triggerable(name = "tools-master", builderNames = builders_tools_master)

# TODO: We don't always create schedulers which causes errors in modern buildmasters.
builders_other = []
for i in scumm_platforms_other.keys():
	builders_other.append("other-%s" % i)

s_build_other = Triggerable(name = "other", builderNames = builders_other)

c["schedulers"] = [
	s_master,
	s_stable,
	s_tools_master,
	s_build_master,
	s_build_stable,
	s_build_tools_master,
	s_build_other
]

# The nightly schedulers.
if scumm_build_nightly_master:
	c["schedulers"].append(Nightly(name = "nightly_master",
							branch = scumm_branch_master,
							builderNames = [ "nightly-master" ],
							hour = 4,
							minute = 1,
							onlyIfChanged = True))

if scumm_build_nightly_stable:
	c["schedulers"].append(Nightly(name = "nightly_stable",
							branch = scumm_branch_stable,
							builderNames = [ "nightly-stable" ],
							hour = 4,
							minute = 0,
							onlyIfChanged = True))

if scumm_tools_build_nightly_master:
	c["schedulers"].append(Nightly(name = "nightly_tools_master",
							branch = scumm_tools_branch_master,
							builderNames = [ "tools-nightly-master" ],
							hour = 4,
							minute = 2,
							onlyIfChanged = True))

if scumm_build_nightly_other:
	c["schedulers"].append(Nightly(name = "nightly_other",
							branch = scumm_other_branch,
							builderNames = [ "nightly-other" ],
							hour = 4,
							minute = 3,
							onlyIfChanged = True))

# Scheduler to force fetching the source code.
c["schedulers"].append(ForceScheduler(name = "force-scheduler-fetch",
					reason=StringParameter(name="reason", label="reason:<br>", required=True, size=80),
					builderNames = [ "fetch-master", "fetch-stable", "fetch-tools-master" ],
					properties = []))

# Scheduler to force building and optionally packaging.
s_force_builders = []
s_force_builders.extend(builders_master)
s_force_builders.extend(builders_stable)
s_force_builders.extend(builders_tools_master)
c["schedulers"].append(ForceScheduler(name = "force-scheduler-build",
					reason=StringParameter(name="reason", label="reason:<br>", required=True, size=80),
					builderNames = s_force_builders,
					properties = [ BooleanParameter(name="package", label="Package", default=False) ]))

# TODO: Right now we do not allow to force building of nightlies, nor other
# branch builders. We might want to allow that in the future.

####### BUILDERS

from buildbot.process import factory
from buildbot.process.properties import WithProperties
from buildbot.steps.source import Git
from buildbot.steps.trigger import Trigger
from buildbot.steps.shell import Compile, Test

# One lock to rule them all.
# Used to prevent source updates when the nightly schedulers are busy.
from buildbot.locks import MasterLock, SlaveLock
lock_src = MasterLock("source")
lock_bot = SlaveLock("slave", maxCount = 1)

# The source fetching builders

c["builders"] = []

f = factory.BuildFactory()
f.useProgress = False
f.addStep(Git(mode = "update",
				workdir = "src",
				repourl = scumm_giturl,
				branch = scumm_branch_master))
f.addStep(Trigger(schedulerNames = [ "master" ],
					copy_properties = [ 'got_revision' ],
					updateSourceStamp = True,
					waitForFinish = True))

c["builders"].append( {
	"name": "fetch-master",
	"slavename": slave_vm2,
	"builddir": "src-master",
	"factory": f,
	"category": "fetch",
	"locks": [ lock_src.access("exclusive") ]
})

f = factory.BuildFactory()
f.useProgress = False
f.addStep(Git(mode = "update",
				workdir = "src",
				repourl = scumm_giturl,
				branch = scumm_branch_stable))
f.addStep(Trigger(schedulerNames = [ "stable" ],
					updateSourceStamp = True,
					waitForFinish = True))

c["builders"].append( {
	"name": "fetch-stable",
	"slavename": slave_vm2,
	"builddir": "src-stable",
	"factory": f,
	"category": "fetch",
	"locks": [ lock_src.access("exclusive") ]
})

f = factory.BuildFactory()
f.useProgress = False
f.addStep(Git(mode = "update",
				workdir = "src",
				repourl = scumm_tools_giturl,
				branch = scumm_tools_branch_master))
f.addStep(Trigger(schedulerNames = [ "tools-master" ],
					copy_properties = [ 'got_revision' ],
					updateSourceStamp = True,
					waitForFinish = True))

c["builders"].append( {
	"name": "fetch-tools-master",
	"slavename": slave_vm2,
	"builddir": "src-tools-master",
	"factory": f,
	"category": "fetch",
	"locks": [ lock_src.access("exclusive") ]
})

# TODO: This causes configuration errors because we don't supply schedulers
#f = factory.BuildFactory()
#f.useProgress = False
#f.addStep(Git(mode = "update",
#				workdir = "src",
#				repourl = scumm_other_giturl,
#				branch = scumm_other_branch))
#f.addStep(Trigger(schedulerNames = [ "other" ],
#					copy_properties = [ 'got_revision' ],
#					updateSourceStamp = True,
#					waitForFinish = True))
#
#c["builders"].append( {
#	"name": "fetch-other",
#	"slavename": slave_vm2,
#	"builddir": "src-other",
#	"factory": f,
#	"category": "fetch",
#	"locks": [ lock_src.access("exclusive") ]
#})

# Nightly builders

if scumm_build_nightly_master:
	f = factory.BuildFactory()
	f.addStep(scumm.Clean(prefix = "master"))
	f.addStep(Trigger(schedulerNames = [ "master" ],
						updateSourceStamp = True,
						waitForFinish = True,
						set_properties = { "package": True }))

	c["builders"].append( {
		"name": "nightly-master",
		"slavename": slave_vm2,
		"builddir": "nightly-master",
		"factory": f,
		"category": "nightly",
		"locks": [ lock_src.access("exclusive") ]
	})

if scumm_build_nightly_stable:
	f = factory.BuildFactory()
	f.addStep(scumm.Clean(prefix = "stable"))
	f.addStep(Trigger(schedulerNames = [ "stable" ],
						updateSourceStamp = True,
						waitForFinish = True,
						set_properties = { "package": True }))

	c["builders"].append( {
		"name": "nightly-stable",
		"slavename": slave_vm2,
		"builddir": "nightly-stable",
		"factory": f,
		"category": "nightly",
		"locks": [ lock_src.access("exclusive") ]
	})

if scumm_tools_build_nightly_master:
	f = factory.BuildFactory()
	f.addStep(scumm.Clean(prefix = "tools-master"))
	f.addStep(Trigger(schedulerNames = [ "tools-master" ],
						updateSourceStamp = True,
						waitForFinish = True,
						set_properties = { "package": True }))

	c["builders"].append( {
		"name": "tools-nightly-master",
		"slavename": slave_vm2,
		"builddir": "tools-nightly-master",
		"factory": f,
		"category": "nightly",
		"locks": [ lock_src.access("exclusive") ]
	})

if scumm_build_nightly_other:
	f = factory.BuildFactory()
	f.addStep(scumm.Clean(prefix = "other"))
	f.addStep(Trigger(schedulerNames = [ "other" ],
						updateSourceStamp = True,
						waitForFinish = True,
						set_properties = { "package": True }))

	c["builders"].append( {
		"name": "nightly-other",
		"slavename": slave_vm2,
		"builddir": "nightly-other",
		"factory": f,
		"category": "nightly",
		"locks": [ lock_src.access("exclusive") ]
	})

# Dynamic generated builders based on the platforms defined at the top of this file

configure_path = "../../src-master/src/configure"
for name, config in scumm_platforms_master.items():
	f = factory.BuildFactory()
	f.useProgress = False

	f.addStep(scumm.Prepare(configure = configure_path))

	platform_build_verbosity = ""
	if scumm_verbose_build_master:
		platform_build_verbosity = "--enable-verbose-build"

	f.addStep(scumm.Configure(command = [
											configure_path,
											"--enable-all-engines",
											"--disable-engine=testbed",
											platform_build_verbosity
										] + config["configureargs"],
								env = config["env"]))

	f.addStep(Compile(command = [
							"make",
							"-j16"
						],
						env = config["env"]))

	if name in scumm_native_buildname:
		f.addStep(Test(env = config["env"]))
	elif name not in scumm_untestable_platforms:
		# Compile Tests (Runner), but do not execute (as binary is non-native)
		f.addStep(Test(command = [ "make", "test/runner" ], env = config["env"]))

	platform_disttarget = ""
	if config.has_key("disttarget"):
		platform_disttarget = config["disttarget"]
	else:
		if config.has_key("strip"):
			f.addStep(scumm.Strip(command = config["strip"]))

	if name not in scumm_buildonly_platforms:
		f.addStep(scumm.Package(disttarget = platform_disttarget,
								srcpath = "../../src-master/src/",
								dstpath = scumm_package_dst_master,
								package = scumm_package_master,
								buildname = name + "-%s" % scumm_branch_master_desc,
								platform_package = config["package"],
								archive_format = config["archive_format"],
								env = config["env"]))

	c["builders"].append( {
		"name": "master-%s" % name,
		"slavename": slave_vm2,
		"builddir": "master-%s" % name,
		"factory": f,
		"locks": [ lock_bot.access('counting') ],
		"category": "master"
	})

configure_path = "../../src-stable/src/configure"
for name, config in scumm_platforms_stable.items():
	f = factory.BuildFactory()
	f.useProgress = False

	f.addStep(scumm.Prepare(configure = configure_path))

	platform_build_verbosity = ""
	if scumm_verbose_build_stable:
		platform_build_verbosity = "--enable-verbose-build"

	f.addStep(scumm.Configure(command = [
											configure_path,
											platform_build_verbosity
										] + config["configureargs"],
								env = config["env"]))

	f.addStep(Compile(command = [
							"make",
							"-j16"
						],
						env = config["env"]))

	if name in scumm_native_buildname:
		f.addStep(Test(env = config["env"]))
	elif name not in scumm_untestable_platforms:
		# Compile Tests (Runner), but do not execute (as binary is non-native)
		f.addStep(Test(command = [ "make", "test/runner" ], env = config["env"]))

	platform_disttarget = ""
	if config.has_key("disttarget"):
		platform_disttarget = config["disttarget"]
	else:
		if config.has_key("strip"):
			f.addStep(scumm.Strip(command = config["strip"]))

	if name not in scumm_buildonly_platforms:
		f.addStep(scumm.Package(disttarget = platform_disttarget,
								srcpath = "../../src-stable/src/",
								dstpath = scumm_package_dst_stable,
								package = scumm_package_stable,
								buildname = name + "-%s" % scumm_branch_stable_desc,
								platform_package = config["package"],
								archive_format = config["archive_format"],
								env = config["env"]))

	c["builders"].append( {
		"name": "stable-%s" % name,
		"slavename": slave_vm2,
		"builddir": "stable-%s" % name,
		"factory": f,
		"locks": [ lock_bot.access('counting') ],
		"category": "stable"
	})

configure_path = "../../src-tools-master/src/configure"
for name, config in scumm_platforms_master.items():
	if name not in scumm_desktop_platforms:
		continue

	if config.has_key("env-tools"):
		env_tools = config["env-tools"]
	else:
		env_tools = config["env"]

	f = factory.BuildFactory()
	f.useProgress = False

	f.addStep(scumm.Prepare(configure = configure_path))

	platform_build_verbosity = ""
	if scumm_tools_verbose_build_master:
		platform_build_verbosity = "--enable-verbose-build"

	f.addStep(scumm.Configure(command = [
											configure_path,
											platform_build_verbosity
										] + config["configureargs-tools"],
								env = env_tools))

	f.addStep(Compile(command = [
							"make",
							"-j16"
						],
						env = env_tools))

	# No test step for tools as no unit tests currently.

	platform_disttarget = ""
	if config.has_key("disttarget-tools"):
		platform_disttarget = config["disttarget-tools"]
	# FIXME - Stripping disabled as the command includes executable name
	#else:
	#	if config.has_key("strip"):
	#		f.addStep(scumm.Strip(command = config["strip"]))

	f.addStep(scumm.Package(disttarget = platform_disttarget,
							srcpath = "../../src-tools-master/src/",
							dstpath = scumm_tools_package_dst_master,
							package = scumm_tools_package_master,
							buildname = name + "-%s" % scumm_tools_branch_master_desc,
							platform_package = config["package-tools"],
							archive_format = config["archive_format"],
							env = env_tools))

	c["builders"].append( {
		"name": "tools-master-%s" % name,
		"slavename": slave_vm2,
		"builddir": "tools-master-%s" % name,
		"factory": f,
		"locks": [ lock_bot.access('counting') ],
		"category": "tools-master"
	})

configure_path = "../../src-other/src/configure"
for name, config in scumm_platforms_other.items():
	f = factory.BuildFactory()
	f.useProgress = False

	f.addStep(scumm.Prepare(configure = configure_path))

	platform_build_verbosity = ""
	if scumm_other_verbose_build:
		platform_build_verbosity = "--enable-verbose-build"

	f.addStep(scumm.Configure(command = [
											configure_path,
											"--enable-all-engines",
											"--disable-engine=testbed",
											platform_build_verbosity
										] + config["configureargs"],
								env = config["env"]))

	f.addStep(Compile(command = [
							"make",
							"-j16"
						],
						env = config["env"]))

	if name in scumm_native_buildname:
		f.addStep(Test(env = config["env"]))
	elif name not in scumm_untestable_platforms:
		# Compile Tests (Runner), but do not execute (as binary is non-native)
		f.addStep(Test(command = [ "make", "test/runner" ], env = config["env"]))

	platform_disttarget = ""
	if config.has_key("disttarget"):
		platform_disttarget = config["disttarget"]
	else:
		if config.has_key("strip"):
			f.addStep(scumm.Strip(command = config["strip"]))

	if name not in scumm_buildonly_platforms:
		f.addStep(scumm.Package(disttarget = platform_disttarget,
								srcpath = "../../src-other/src/",
								dstpath = scumm_other_package_dst,
								package = scumm_package_other,
								buildname = name + "-%s" % scumm_other_branch_desc,
								platform_package = config["package"],
								archive_format = config["archive_format"],
								env = config["env"]))

	c["builders"].append( {
		"name": "other-%s" % name,
		"slavename": slave_vm2,
		"builddir": "other-%s" % name,
		"factory": f,
		"locks": [ lock_bot.access('counting') ],
		"category": "other"
	})

####### STATUS TARGETS

c["status"] = []

from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAprAuth

htfile = os.path.join(expanded_base_dir, 'scumm_htpasswd')
web_authz = None

if os.path.exists(htfile):
	web_authz = Authz(auth=HTPasswdAprAuth(htfile),
		forceBuild='auth', # only authenticated users
		forceAllBuilds='auth', # only authenticated users
		stopBuild='auth', # only authenticated users
		stopAllBuilds='auth', # only authenticated users
		cancelPendingBuild='auth', # only authenticated users
	 )

c["status"].append(
		WebStatus(http_port = "tcp:8010:interface=127.0.0.1",
			change_hook_dialects = { 'github' : True },
			change_hook_auth = [ "file:%s" % (os.path.join(expanded_base_dir, "changehook.passwd")) ],
			order_console_by_time = True,
			authz = web_authz
		)
	)

irc = scumm.IRC("irc.freenode.org", "ScummBot",
				channel = "#scummvm",
				password = scummsecret.pwd_nickserv,
				key = "scummvm", # pseudo-secret channel passkey - prevent generic bots entering channel
				categories = [ "master", "stable", "tools-master", "other" ],
				stableTimer = 15 * 60)

c["status"].append(irc)

####### PROJECT IDENTITY

c["projectName"] = "ScummVM"
c["projectURL"] = "https://scummvm.org/"
c["buildbotURL"] = "https://buildbot.scummvm.org/"
